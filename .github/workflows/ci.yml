name: CI

on:
  push:
    branches: [ main ]
    paths:
      - 'crates/**/*.rs'
      - 'crates/**/Cargo.toml'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'crates/at-peek-web/index.html'
      - 'crates/at-peek-web/Trunk.toml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'crates/**/*.rs'
      - 'crates/**/Cargo.toml'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'crates/at-peek-web/index.html'
      - 'crates/at-peek-web/Trunk.toml'
      - '.github/workflows/ci.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      # Much faster and more comprehensive than manual caching
      - uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings
      
      - name: Run tests
        run: cargo test --workspace
      
      - name: Build
        run: cargo build --workspace --release

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      # Use cargo-binstall for much faster installation (~10s vs ~5-10min)
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main
      
      - name: Install trunk
        run: cargo binstall --no-confirm trunk
      
      - name: Install wasm-opt
        run: |
          npm install -g wasm-opt
      
      - name: Build web UI
        run: |
          cd crates/at-peek-web
          trunk build --release
      
      - name: Optimize WASM with wasm-opt
        run: |
          cd crates/at-peek-web/dist
          echo "Pre-optimization size:"
          ls -lh *.wasm
          
          WASM_FILE=$(ls *.wasm)
          wasm-opt -Oz --enable-bulk-memory --enable-nontrapping-float-to-int --enable-sign-ext --enable-mutable-globals --strip-debug --strip-producers -o "${WASM_FILE}.opt" "${WASM_FILE}"
          mv "${WASM_FILE}.opt" "${WASM_FILE}"
          
          echo "Post-optimization size:"
          ls -lh *.wasm
      
      - name: Check bundle size
        run: |
          cd crates/at-peek-web/dist
          SIZE=$(stat -c%s *.wasm)
          SIZE_KB=$((SIZE / 1024))
          SIZE_MB=$((SIZE_KB / 1024))
          echo "WASM bundle size: ${SIZE} bytes (${SIZE_KB} KB / ${SIZE_MB} MB)"
          echo ""
          if [ $SIZE -gt 524288 ]; then
            echo "⚠️  Warning: WASM bundle exceeds 500KB target (current: ${SIZE_KB} KB)"
          else
            echo "✅ WASM bundle is within 500KB target (current: ${SIZE_KB} KB)"
          fi
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-dist
          path: crates/at-peek-web/dist/
          retention-days: 7

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [test, build-wasm]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: wasm-dist
          path: crates/at-peek-web/dist
      
      - name: Display build output
        run: |
          echo "Deployment artifacts:"
          ls -lh crates/at-peek-web/dist/
          echo ""
          echo "Total deployment size:"
          du -sh crates/at-peek-web/dist/
      
      - name: Deploy to Cloudflare Pages
        id: cloudflare-deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: at-peek
          directory: crates/at-peek-web/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          wranglerVersion: '3'
      
      - name: Deployment Summary
        if: success()
        run: |
          echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Statistics" >> $GITHUB_STEP_SUMMARY
          
          cd crates/at-peek-web/dist
          WASM_SIZE=$(stat -c%s *.wasm 2>/dev/null || stat -f%z *.wasm)
          WASM_SIZE_KB=$((WASM_SIZE / 1024))
          JS_SIZE=$(stat -c%s *.js 2>/dev/null || stat -f%z *.js)
          JS_SIZE_KB=$((JS_SIZE / 1024))
          
          echo "- **WASM Bundle**: ${WASM_SIZE_KB} KB" >> $GITHUB_STEP_SUMMARY
          echo "- **JavaScript**: ${JS_SIZE_KB} KB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Deployment URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: https://peek.bsky.nz" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloudflare Pages**: https://at-peek.pages.dev" >> $GITHUB_STEP_SUMMARY
          echo "- **This Deployment**: ${{ steps.cloudflare-deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ Custom Domain Setup" >> $GITHUB_STEP_SUMMARY
          echo "If this is your first deployment, configure the custom domain:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Cloudflare Dashboard](https://dash.cloudflare.com)" >> $GITHUB_STEP_SUMMARY
          echo "2. Navigate to **Workers & Pages** → **at-peek** → **Custom domains**" >> $GITHUB_STEP_SUMMARY
          echo "3. Add domain: \`peek.bsky.nz\`" >> $GITHUB_STEP_SUMMARY
          
          echo ""
          echo "✅ Deployment complete!"
          echo "🌐 Production URL: https://peek.bsky.nz"
          echo "🔗 Cloudflare URL: https://at-peek.pages.dev"
          echo "📦 WASM size: ${WASM_SIZE_KB} KB"


